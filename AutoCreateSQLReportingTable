CREATE PROCEDURE CreateCustomReportingTable
    @StagingDatabase NVARCHAR(128),
    @StagingSchema NVARCHAR(128),
    @StagingTable NVARCHAR(128),
    @ReportingDatabase NVARCHAR(128),
    @ReportingSchema NVARCHAR(128),
    @ReportingTable NVARCHAR(128)
AS
BEGIN
    DECLARE @SQL NVARCHAR(MAX) = '';

    -- Step 1: Start building the CREATE TABLE statement in the reporting database
    SET @SQL = 'CREATE TABLE ' + QUOTENAME(@ReportingDatabase) + '.' + QUOTENAME(@ReportingSchema) + '.' + QUOTENAME(@ReportingTable) + ' (';

    -- Step 2: Add the IDENTITY column first
    SET @SQL = @SQL + 'Id INT IDENTITY(1,1) PRIMARY KEY, ';

    -- Step 3: Add rowinsertdatetime and contractkey columns
    SET @SQL = @SQL + 'rowinsertdatetime DATETIME DEFAULT GETDATE(), ';
    SET @SQL = @SQL + 'contractkey INT, ';

    -- Step 4: Retrieve the columns from the staging table, skipping identity and timestamp columns
    SELECT @SQL = @SQL + QUOTENAME(COLUMN_NAME) + ' ' + DATA_TYPE + 
           CASE 
                WHEN CHARACTER_MAXIMUM_LENGTH IS NOT NULL THEN '(' + CAST(CHARACTER_MAXIMUM_LENGTH AS NVARCHAR(10)) + ')' 
                ELSE '' 
           END + ','
    FROM [@StagingDatabase].INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_SCHEMA = @StagingSchema 
          AND TABLE_NAME = @StagingTable;

    -- Step 5: Add EffectiveKey and SourceFileName columns
    SET @SQL = @SQL + 'EffectiveKey INT, ';
    SET @SQL = @SQL + 'SourceFileName NVARCHAR(255)';

    -- Step 6: Finalize the SQL statement
    SET @SQL = @SQL + ');';

    -- Debug: Print the SQL (can be removed later)
    -- PRINT @SQL;

    -- Execute the generated SQL
    EXEC sp_executesql @SQL;
END
